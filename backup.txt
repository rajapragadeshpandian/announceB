router.get('/page/:pageNo', (req, res) => {
//     console.log("$$$$","pagination");
//     console.log("###", req.params.pageNo == "next");
//     const limit = 2;
//     const val  = (req.params.pageNo -1) * 2;
//     console.log("$$$", val);
//     changeLog.find()
//     .sort({createdAt : -1 })
//     .skip(val)
//     .limit(limit)
//     .exec((err, changes) => {

//         if(err) {
//             res.status(500).json({
//                 error : err
//             })
//         } else {
//             if(changes.length > 0) {

//                 const response = changes.map((item) => {
//                         return {
//                                 id : item._id,
//                                 title : item.title,
//                                 category : item.category,
//                                 body : item.body

//                         }
//                 });

//                     res.status(200).json({
//                     message : "records returned  successfully",
//                     changes : response,
//                     count : changes.length
//                 });

//             } else {
//                 res.status(404).json({
//                     message : "records not found"
//                 });
//             }
//         }
//     });
    
// });

router.get('/page/:pageNo/:choice',(req, res) => {

    console.log("###", "prev or next page");
    let val;
    const limit = 2;
    const pageNo = req.params.pageNo;
    const choice = req.params.choice;
    if(choice === "next") {
        val = req.params.pageNo * limit;
    } else {
        val = (req.params.pageNo -2) * limit;
    }

    changeLog.find()
    .sort({ createdAt : -1 })
    .skip(val)
    .limit(limit)
    .exec((err, changes) => {
        if(err) {
            res.status(500).json({
                error : err
            });
        } else {
            if(changes.length > 0) {
                const response = changes.map((item) => {
                    return {
                        id : item._id,
                        title : item.title,
                        category : item.category,
                        body : item.body
                    }
                });
                res.status(200).json({
                    message : "prev or next page",
                    value  : response
                });
            } else {
                res.status(404).json({
                    message : "changeLog not found"
                });
            }
            
        }

    });   

});

router.get('/text/search', (req, res) => {

    console.log("textsearch");
    const limit = 3;
    let val;
    let findText = req.query.value ? { $text : {$search : req.query.value }} : {};
    //we can do the same in req.query.text in the initial get method
    //http://localhost:5000/changeLog/text/search?value=signup&&pageNo=2 -- sample req
    console.log("$$$",findText );
    if(req.query.choice === "next") {
        console.log("next");
        val = req.query.pageNo * limit;
    } else if(req.query.choice === "prev") {
        console.log("prev");
        val = (req.query.pageNo -2) * limit;
    } else {
        val  = req.query.pageNo ? (req.query.pageNo -1) * limit : 0;
    }
     // on initial search set skip value to 0 if 
     // pageno comes as query param set pageNo to skip value     
    //{ $text : {$search : { '$ne': null } }}
        changeLog.find(findText)
        .select('title category body _id')
        .skip(val)
        .limit(limit)
        .exec()
        .then((change) => {

            console.log("$$$$", change);

            res.status(200).json({
                change : change,
                len : change.length
            });
        })
        .catch((err) => {
            res.status(500).json({
                error : err
            });
        })

});

db.coll.aggregate([
    { $match: { $text: { $search: "cake tea" } } },
    {$sort: { borough : 1 }},
    { $project: { title: 1, _id: 0 } },
    {$skip: skip},
    {$limit: limit},
    ...
]);

db.articles.aggregate(
   [
     { $match: { $text: { $search: "cake tea" } } },
     { $sort: { score: { $meta: "textScore" } } },
     { $project: { title: 1, _id: 0 } }
   ]
)

db.restaurants.aggregate(
   [
     { $sort : { borough : 1 } }
   ]
)
